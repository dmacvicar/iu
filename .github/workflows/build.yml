name: Build
on: [push, pull_request]
env:
  BUILD_TYPE: Release
jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - name: "Ubuntu 20.04 GCC"
          os: ubuntu-20.04
          cc: "gcc-9"
          cxx: "g++-9"
        - name: "macOS Latest Clang"
          os: macos-latest
          cc: "clang"
          cxx: "clang++"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'
    - if: ${{ runner.os == 'Linux' }}
      name: Install package dependencies (Linux)
      run: |
        sudo apt-get update
        sudo apt-get install clang-tidy
        sudo apt-get install libxapian-dev
        sudo apt-get install libexif-dev
        sudo apt-get install libopencv-dev
        sudo apt-get install libcurl-dev
        sudo apt-get install ninja-build
    - if: ${{ runner.os == 'macOS' }}
      name: Install package dependencies (macOS)
      run: |
        brew install pkg-config
        brew install libexif
        brew install xapian
        brew install opencv
        brew install ninja
    - name: Configure
      shell: cmake -P {0}
      run: |
        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        execute_process(
          COMMAND ${CMAKE_COMMAND}
            -S .
            -B build
            -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
            -G Ninja
            -D CMAKE_MAKE_PROGRAM=ninja
          RESULT_VARIABLE result
          ERROR_VARIABLE error_message
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Could not run with ${CMAKE_COMMAND}: Got ${error_message} - ${result}")
        endif()
    - name: Build
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND ${CMAKE_COMMAND} --build build
          RESULT_VARIABLE result
          ERROR_VARIABLE error_message
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Could not run with ${CMAKE_COMMAND}: Got ${error_message} - ${result}")
        endif()
